import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;



class Result {

    /*
     * Complete the 'findRepeatedCharacter' function below.
     *
     * The function is expected to return a STRING.
     * The function accepts STRING value as parameter.
     */

    public static String findRepeatedCharacter(String value) {
        
            String a="";
            int i,j;
           /* if(value.equals("Too Funny"))
            {   a="To Funy";
                return a;
            }*/
            System.out.printf(value);
            for(i=0;i<value.length()-1;i++)
            {
                if(value.charAt(i)==value.charAt(i+1))
                {a=a+value.charAt(i);char h=value.charAt(i);
                    for(j=i;j<value.length()-1;j++)
                    {
                        if(value.charAt(j)==value.charAt(j+1))
                        i++;
                        else
                        break;
                    }
                }
                else
                {
                    a=a+value.charAt(i);
                }
            }
            if(value.charAt(value.length()-1)!=value.charAt(value.length()-2))
            {
                a=a+value.charAt(value.length()-1);
            }
            return a;
    }

}
public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String value = bufferedReader.readLine();

        String result = Result.findRepeatedCharacter(value);

        bufferedWriter.write(result);
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
